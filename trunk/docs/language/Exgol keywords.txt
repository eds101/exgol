EXGOL - Reserved Words and usage definitions

#		comments

{}		Defines a list: list of states, list of states, also captures the rule blocks

[]		range operator for proximities

:=		assignment

%%		exgol body separator
		
		[exgol declerations]
		%%
		[exgol rule set]
		%%
		[simulation parameters]

alias	used to alias and groups different lists, to alias 3 out of 5 available states in a list of states
		
		alias varName := {list of items of the same type to be grouped together} //like list of states, list of class or list of transformations???

class	reserved to build the class list for exgol.  A class in exgol can be associated with a color using className:color.[predefined color]
		
		class := {comma seperated list of classes}
		class := {bacteria, virus}
		class := {bacteria:black, virus:blue}

state	comma separated list of available states for exgol
		
		state := {comma seperated list of states}
		state := {live, sick, dead, happy}

grid	reserved to define the grid
		
		grid:= {a,b...z} [a-z] are integers greater than 0

grid_t		reserved to define grid type
		
		grid_t := bounded|wrapped
		
trans_t	reserved to identify a transformation from one state to another
		
		trans_t name := state1 -> state2

trans	reserved to define a transition rule
		
		trans transName {
			#trans parameters, refer to body of a transition section
		}

EXGOL default parameters
empty		alias for a cell which is not occupied by any class
peer		alias for the cells of the same class 
enemy		alias for the cells of another class 
neighbor	alias for all occupied cells of any class

Transition rule keywords

type	reserved to define the transformation the rule does e.g from state live to empty
		
		type := transfName

class	list of the classes that this rule applies to #we might want to look into replacing the class keyword since we already use it on top section
		
		class := {list of one or more classes}	# classes that this rule applies to
		

condition	the condition for this rule to execute.class and state are option, when left blank, by default, use this {peer}{states} on left and {enemy}{states}
		
		condition:= class.state[range] {>, <, =, <>, <=, >= } class.state[range]
		

[]		range operator - You can specify comma-separated ranges. 

		[1,3:4] or [1,3,4] would mean proximity 1, 3 and 4. 

prob	on a successful condition, probability of this transition being applied

		prob := number between 0 and 1

resolve	on a conflict, presedence order of the winning class in a condition, by default, random
		
		resolve := {class1, class2} # class1 is picked over class 2 if both classes match the transition

Add the rest of the keywords